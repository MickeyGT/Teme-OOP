import sys
global ok
def display():
    print ('Ce tip de afisare doriti?')
    print ('Optiunea 1: Matrice de adiacenta.')
    print ('Optiunea 2: Lista de adiacenta. ')
    type = input('Selectati optiunea ')
    if type == '1':
        print('Afisam matricea de adiacenta:\n')
        for i in range(1,n+1):
            for j in range(1,n+1):
                if matAdiac[i][j] != 0:
                    sys.stdout.write('1 ')
                else:
                    sys.stdout.write('0 ')
            print('\n')
    elif type == '2':
        print('Afisam lista de adiacenta:\n')
        for i in range(1,n+1):
             print('Nodul ',i,':',*list[i], sep=' ')
    else:
        print('Optiunea aleasa este gresita, va rog alegeti iar. ')
        display()
    print('\n')

def dfs(nod):
    for i in list[nod]:
        if viz[i]==0:
            viz[i]=1
            comp.append(i)
            dfs(i)

def findcycle(nod):
    global ok
    for i in list[nod]:
        if viz[i]==0:
            viz[i]=1
            for j in list[i]:
                if viz[j]==1 & j!=nod:
                    ok=1
            findcycle(i)
             
def displaycompconx():
    global viz,comp
    comp=[]
    viz=[0 for x in range(100)]
    nr=0
    for i in range(1,n+1):
        if viz[i]==0:
            viz[i]=1
            dfs(i)
            comp.append(i)
            nr=nr+1
            print('Componenta conexa cu numarul ',nr,'este: ',*comp,sep=' ')
            del comp[:]
    print('\n')

def graphisconex():
    global viz,comp
    comp=[]
    viz=[0 for x in range(100)]
    nr=0
    for i in range(1,n+1):
        if viz[i]==0:
            viz[i]=1
            dfs(i)
            nr=nr+1
    if nr==1:
        print('Graful este unul conex')
    else:
        print('Graful nu este conex')
    print('\n')    

def create():
    global n,m,list,matAdiac
    n = input('Cate noduri sa aiba graful? ')
    n = int (n)
    #list ne va pastra listele de adiacenta pentru nodurile din graf.
    list=[[]for y in range(100)]
    matAdiac=[[0 for x in range(100)]for y in range(100)]
    m = input('Cate muchii sa aiba graful? ')
    m = int(m)
    print ('Citim cele ',m,' muchii:')
    for i in range(1,m+1):
        print('Nodul x se va leaga de nodul y')
        x = int(input('x = '))
        y = int(input('y = '))
        list[x].append(y)
        matAdiac[x][y]=1
        list[y].append(x)
        matAdiac[y][x]=1 
    print('\n')   

def paths():
    print ('Ce drum doriti sa aflati?')
    print ('Optiunea 1: Cel mai lung drum intre doua noduri din graf.')
    print ('Optiunea 2: Lista de adiacenta. ')
    type = input('Selectati optiunea ')
    if type == '1':
        print('Afisam matricea de adiacenta:\n')
        for i in range(1,n+1):
            for j in range(1,n+1):
                if matAdiac[i][j] != 0:
                    sys.stdout.write('1 ')
                else:
                    sys.stdout.write('0 ')
            print('\n')
    elif type == '2':
        print('Afisam lista de adiacenta:\n')
        for i in range(1,n+1):
             print('Nodul ',i,':',*list[i], sep=' ')
    else:
        print('Optiunea aleasa este gresita, va rog alegeti iar. ')
        display()
    print('\n')    

        
def menu():
    print ('Meniul problemei:')
    print ('Optiunea 1: Crearea grafului.')
    print ('Optiunea 2: Afisarea grafului.')
    print ('Optiunea 3: Determinirea daca graful este conex.')
    print ('Optiunea 4: Determinarea componentelor conexe ale grafului.')
    print ('Optiunea 5: Determinarea daca graful contine cicluri.')
    type = input('Selectati optiunea ')
    if type == '1':
        print('\n')
        create()
        menu()
    elif type == '2':
        print('\n')
        display()
        menu()
    elif type == '3':
        print('\n')
        graphisconex()
        menu()
    elif type == '4':
        print('\n')
        displaycompconx()
        menu()
    elif type == '5':
        print('\n')
        global ok,viz 
        ok=0
        viz=[0 for x in range(100)]
        for k in range(1,n+1):
            if viz[k]==0:
                viz[k]=1
                findcycle(k)
        if ok==1:
            print('Graful contine cel putin un ciclu.')
        else:
            print('Graful nu contine nici-un ciclu.') 
        menu()
    elif type == '5':
        print('\n')
        paths()
        menu()
    else:
        print('\n')
        print('Optiunea aleasa este gresita, va rog alegeti iar. ')
        menu()
    print('\n')

menu()
