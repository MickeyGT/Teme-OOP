import sys
global ok
def display():
    print ('What kind of display do you want?')
    print ('Option 1: Adjacency Matrix.')
    print ('Option 2: Adjacency List.')
    type = input('Please select an option: ')
    if type == '1':
        print('Displaying the Adjacency Matrix:\n')
        for i in range(1,n+1):
            for j in range(1,n+1):
                if matAdiac[i][j] != 0:
                    sys.stdout.write('1 ')
                else:
                    sys.stdout.write('0 ')
            print('\n')
    elif type == '2':
        print('Displaying the Adjacency List:\n')
        for i in range(1,n+1):
             print('Node ',i,':',*list[i], sep=' ')
    else:
        print('Chosen option is invalid. Please pick again.\n')
        display()
    print('\n')

def dfs(nod):
    for i in list[nod]:
        if viz[i]==0:
            viz[i]=1
            comp.append(i)
            dfs(i)

def findcycle(nod):
    global ok
    for i in list[nod]:
        if viz[i]==0:
            viz[i]=1
            for j in list[i]:
                if viz[j]==1 & j!=nod:
                    ok=1
            findcycle(i)
             
def displaycompconx():
    global viz,comp
    comp=[]
    viz=[0 for x in range(100)]
    nr=0
    for i in range(1,n+1):
        if viz[i]==0:
            viz[i]=1
            dfs(i)
            comp.append(i)
            nr=nr+1
            print('The connected conex component with the number ',nr,'is: ',*comp,sep=' ')
            del comp[:]
    print('\n')

def graphisconex():
    global viz,comp
    comp=[]
    viz=[0 for x in range(100)]
    nr=0
    for i in range(1,n+1):
        if viz[i]==0:
            viz[i]=1
            dfs(i)
            nr=nr+1
    if nr==1:
        print('The graph is a conex one.\n')
    else:
        print('The graph is NOT a conex one.\n')
    print('\n')    

def create():
    global n,m,list,matAdiac
    #n will hold the number of nodes our graph will have.
    n = input('How many nodes will the graph have? ')
    n = int (n)
    #list will hold the adjacency list for all our nodes.
    list=[[]for y in range(100)]
    #matAdiac will hold the adjacency matrix for all our nodes.(1 if we have a path from i to j and 0 if not)
    matAdiac=[[0 for x in range(100)]for y in range(100)]
    #m will hold the number of edges our graph will have.
    m = input('How many edges will the graph have? ')
    m = int(m)
    print ('Reading the ',m,' edges:')
    for i in range(1,m+1):
        print('Node x will be tied to node y:')
        x = int(input('x = '))
        y = int(input('y = '))
        #we add the node y in x's adjacency list and matrix
        list[x].append(y)
        matAdiac[x][y]=1
        #we add the node x in y's adjacency list and matrix
        list[y].append(x)
        matAdiac[y][x]=1 
    print('\n')   
        
def menu():
    print ('Menu of the problem:')
    print ('Option 1: Creating the graph.')
    print ('Option 2: Displaying the graph.')
    print ('Option 3: Finding out if the graph is conex.')
    print ('Option 4: Finding the conex components of the graph.')
    print ('Option 5: Finding out if the graph contains cycles.')
    type = input('Please select an option: ')
    if type == '1':
        print('\n')
        #the function create will create our graph's adjacency list and matrix.
        create()
        menu()
    elif type == '2':
        print('\n')
        #the function display will display either the graph's adjacency list or matrix.
        display()
        menu()
    elif type == '3':
        print('\n')
        #the function graphisconex will tell us if our graph is conex or not.
        graphisconex()
        menu()
    elif type == '4':
        print('\n')
        #the function displaycompconx will display the conex components of the graph.
        displaycompconx()
        menu()
    elif type == '5':
        print('\n')
        global ok,viz
        #ok is the variabile that will hold the answer to the question if the graph has any cycles. 
        ok=0
        viz=[0 for x in range(100)]
        #we have to do this for every node that has not been visited because we could find a cycle inside another conex component of the graph.
        for k in range(1,n+1):
            if viz[k]==0:
                viz[k]=1
                findcycle(k)
        if ok==1:
            print('The graph contains at least 1 cycle.\n')
        else:
            print('The graph contains no cycles.\n') 
        menu()
    elif type == '5':
        print('\n')
        paths()
        menu()
    else:
        #menu for when an invalid option is picked.
        print('\n')
        print('Chosen option is invalid. Please pick again.\n')
        menu()
    print('\n')

menu()
